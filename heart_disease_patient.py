# -*- coding: utf-8 -*-
"""Heart_disease_patient.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/1ArjunPandey/Machine_Learning/blob/master/Heart_disease_patient.ipynb

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression

"""Data collection and preprocessing"""

heart_data = pd.read_csv('/content/heart_disease_data.csv')
heart_data.head()

heart_data.tail()

#information of number of rows and coloumn
heart_data.shape

# getting general info
heart_data.info()

# gettig statistical measure of all attribute ya fir coloum
heart_data.describe()

#checking for even distribution
heart_data['target'].value_counts()

"""Here target is

0 ---> means he do not have heart disease

1 ---> means he have heart disease

Splitting feature and targets
"""

X = heart_data.drop(columns = 'target', axis = 1)
Y = heart_data['target']

#splitting data into training and test case

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify= Y, random_state=2)

#checking data after split
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

"""Model Training"""

#using Logestic Regression

model = LogisticRegression()

#fitting data or training data

model.fit(X_train, Y_train)

"""Model Evaluation"""

# Evaluating score of model

from sklearn.metrics import accuracy_score

# accuracy of train model
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print("Accuracy is", training_data_accuracy*100, "%")

# accuracy of test model
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print("Accuracy is", test_data_accuracy*100, "%")

